# $Id: wrapper.conf 76 2007-11-08 13:02:16Z marshal.wu@gmail.com $

#********************************************************************
# TestWrapper Properties
#
# NOTE - Please use src/conf/wrapper.conf.in as a template for your
#        own application rather than the values used for the
#        TestWrapper sample.
#********************************************************************
# Java Application
wrapper.java.command=%JAVA_HOME%/bin/java

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
#wrapper.java.mainclass=sample.wrapper.SampleServer
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp

# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
wrapper.java.classpath.1=wrapper.jar
wrapper.java.classpath.2=ExeCaller-1.0-SNAPSHOT.jar
wrapper.java.classpath.3=lib/*.jar

# Java Library Path (location of Wrapper.DLL or libwrapper.so)
wrapper.java.library.path.1=.

# Java Additional Parameters
#wrapper.java.additional.1=

# Initial Java Heap Size (in MB)
#wrapper.java.initmemory=3

# Maximum Java Heap Size (in MB)
#wrapper.java.maxmemory=64

# Application parameters.  Add parameters as needed starting from 1
wrapper.app.parameter.1=com.zhiyuan.pqdifgenerate.Main

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Format of output for the console.  (See docs for formats)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=wrapper.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=0

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=0

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper Windows Properties
#********************************************************************
# Title to use when running as a console
wrapper.console.title=PQDIF Generate Server

#********************************************************************
# Wrapper Restart Properties
#********************************************************************

# Controls whether or not the Wrapper configuration file will be
# reloaded in the event of a JVM restart.   (default: FALSE)
wrapper.restart.reload_configuration=TRUE

# Controls the number of seconds to pause between a JVM exiting for
# any reason, and a new JVM being launched.   (default: 5)
wrapper.restart.delay=10

# Maximum number of times that the Wrapper will attempt to restart
# the JVM if each attempted invocation exits abnormally or is
# restarted shortly after having being launched.   (default: 5)
#
# If the JVM was running for a period longer than the value set in
# the wrapper.successful_invocation_time  property, then the restart
# count will be reset to 0. So this count only applies to JVM
# invocations which fail on startup.
wrapper.max_failed_invocations=5

# Specifies the amount of time that an application must remain
# running before it will be considered to have been a successful
# invocation.   (default: 300)
wrapper.successful_invocation_time=300

# This property makes it possible to control whether or not multiple
# invocations of a given application can be run at the same time.
# (default: FALSE)
wrapper.single_invocation=FALSE


#********************************************************************
# Wrapper Debug Properties
#********************************************************************

# Used to quickly enable debug logging both to the console and log
# file. Disabling this flag does not disable debug logging to the
# console or log file.   (default: FALSE)
wrapper.debug=TRUE
#********************************************************************

